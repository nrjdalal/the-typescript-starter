name: NPM Release Canary

on:
  push:
    branches:
      - main
  issue_comment:
    types: [created]

concurrency:
  cancel-in-progress: true
  group: ${{ github.workflow }}-${{ github.ref }}

permissions:
  id-token: write
  contents: write
  statuses: write

jobs:
  release:
    if: github.event_name == 'push' || (github.event_name == 'issue_comment' && contains(github.event.comment.body, 'release'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          registry-url: https://registry.npmjs.org

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Dependencies
        run: bun install --frozen-lockfile

      - name: Build Package
        run: bun run build

      - name: Release Package
        run: |
          PACKAGE_NAME=$(npx json -f package.json -a name)
          PACKAGE_VERSION=$(npx json -f package.json -a version)
          VERSIONS=$(npm view $PACKAGE_NAME dist-tags --json)
          LATEST_VERSION=$(echo $VERSIONS | npx json latest)
          if [[ $PACKAGE_VERSION != $LATEST_VERSION ]]; then
            RELEASE_VERSION=$PACKAGE_VERSION
            HAS_TAG=$(echo $PACKAGE_VERSION | grep -o '[a-zA-Z]*' | head -n 1)
            TAG=$([[ -n "$HAS_TAG" ]] && echo $HAS_TAG || echo "latest")
          else
            TAG="canary"
            RELEASE_VERSION=$(npx semver $LATEST_VERSION -i minor)
            TAGGED_VERSION=$(echo $VERSIONS | npx json $TAG)
            RELEASE_VERSION=$([[ $TAGGED_VERSION == $RELEASE_VERSION* ]] && npx semver $TAGGED_VERSION -i prerelease || echo $RELEASE_VERSION-$TAG.0)
          fi
          npx json -I -f package.json -e "this.version=\"$RELEASE_VERSION\""
          npm publish --provenance --access public --no-git-checks --tag $TAG
          PACKAGE_URL="https://www.npmjs.com/package/$PACKAGE_NAME/v/$RELEASE_VERSION"
          if [[ $GITHUB_EVENT_NAME == 'push' ]]; then
            # Add release comment
            curl -fsSL -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/$GITHUB_REPOSITORY/commits/$GITHUB_SHA/comments" \
              -d "{\"body\": \"Package released - [\`$PACKAGE_NAME@$RELEASE_VERSION\`]($PACKAGE_URL)\"}" >/dev/null \
              && echo "ðŸŸ¢ Release comment added!" || echo "ðŸ”´ Failed to add release comment."
            # Update release status
            curl -fsSL -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/$GITHUB_REPOSITORY/statuses/$GITHUB_SHA" \
              -d "{\"state\": \"success\", \"context\": \"Package released\", \"description\": \"$PACKAGE_NAME@$RELEASE_VERSION\", \"target_url\": \"$PACKAGE_URL\"}" >/dev/null \
              && echo "ðŸŸ¢ Release status updated!" || echo "ðŸ”´ Failed to update release status."
          elif [[ $GITHUB_EVENT_NAME == 'issue_comment' ]]; then
            # Add release comment to PR
            PR_NUMBER=$(echo "${{ github.event.issue.pull_request.url }}" | grep -o '[0-9]*$')
            curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/$GITHUB_REPOSITORY/issues/$PR_NUMBER/comments" \
              -d "{\"body\": \"Package released - [\`$PACKAGE_NAME@$RELEASE_VERSION\`]($PACKAGE_URL)\"}" >/dev/null
              # && echo "ðŸŸ¢ Release comment added to PR!" || echo "ðŸ”´ Failed to add release comment to PR."
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
